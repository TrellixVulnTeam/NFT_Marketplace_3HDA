{"ast":null,"code":"var _jsxFileName = \"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Generate = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [count, setCount] = useState(null);\n\n  const generateNFT = async () => {\n    if (!count) return;\n    let items = [];\n    let isLoaded = false;\n    const uri = `http://127.0.0.1:5000/generator`;\n    fetch(uri).then(res => res.json()).then(result => {\n      isLoaded = true;\n      items = res.items;\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      isLoaded = true;\n    });\n    console.log(isLoaded);\n  };\n\n  const loadNFTImages = async () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setCount(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Number of NFT Images\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: generateNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Generate!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Generate, \"se03UwgvFtnB7Ka+34SxvWoS9WM=\");\n\n_c = Generate;\nexport default Generate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Generate\");","map":{"version":3,"sources":["/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js"],"names":["React","useState","ethers","Row","Form","Button","create","ipfsHttpClient","Generate","marketplace","nft","count","setCount","generateNFT","items","isLoaded","uri","fetch","then","res","json","result","error","console","log","loadNFTImages","maxWidth","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,iBAAlC;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,kBAAzC;;;AAGA,MAAMC,QAAQ,GAAG,QAA2B;AAAA;;AAAA,MAA1B;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAA0B;AAC1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMY,WAAW,GAAG,YAAY;AAC9B,QAAI,CAACF,KAAL,EAAY;AAEZ,QAAIG,KAAK,GAAG,EAAZ;AACA,QAAIC,QAAQ,GAAG,KAAf;AAEA,UAAMC,GAAG,GAAI,iCAAb;AACAC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVN,MAAAA,QAAQ,GAAI,IAAZ;AACAD,MAAAA,KAAK,GAAGK,GAAG,CAACL,KAAZ;AAED,KAPL,EAQI;AACA;AACA;AACCQ,IAAAA,KAAD,IAAW;AACTP,MAAAA,QAAQ,GAAG,IAAX;AACD,KAbL;AAgBEQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACH,GAxBD;;AA0BA,QAAMU,aAAa,GAAG,YAAY,CAEjC,CAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,mBAA5B;AAAgD,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAvD;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACE,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA,oCACE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,QAAQ,EAAGC,CAAD,IAAOf,QAAQ,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAvC;AAAyD,cAAA,IAAI,EAAC,IAA9D;AAAmE,cAAA,QAAQ,MAA3E;AAA4E,cAAA,IAAI,EAAC,QAAjF;AAA0F,cAAA,WAAW,EAAC;AAAtG;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,qCACE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAEhB,WAAjB;AAA8B,gBAAA,OAAO,EAAC,SAAtC;AAAgD,gBAAA,IAAI,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAnDD;;GAAML,Q;;KAAAA,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import React, { useState} from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\n\n\nconst Generate = ({ marketplace, nft, }) => {\n  const [count, setCount] = useState(null)\n\n  const generateNFT = async () => {\n    if (!count) return\n    \n    let items = []\n    let isLoaded = false\n     \n    const uri = `http://127.0.0.1:5000/generator`\n    fetch(uri)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          isLoaded =  true\n          items = res.items\n\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          isLoaded = true\n        }\n      )\n\n      console.log(isLoaded)\n  }\n\n  const loadNFTImages = async () => {\n\n  }\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control onChange={(e) => setCount(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Number of NFT Images\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={generateNFT} variant=\"primary\" size=\"lg\">\n                  Generate!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Generate"]},"metadata":{},"sourceType":"module"}