{"ast":null,"code":"var _jsxFileName = \"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nconst Generate = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [count, setCount] = useState(null);\n\n  const generateNFT = async () => {\n    if (!count) return;\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`; // mint nft \n\n    await (await nft.mint(uri)).wait(); // get tokenId of new nft \n\n    const id = await nft.tokenCount(); // approve marketplace to spend nft\n\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setCount(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Number of NFT Images\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: generateNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Generate!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Generate, \"se03UwgvFtnB7Ka+34SxvWoS9WM=\");\n\n_c = Generate;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Generate\");","map":{"version":3,"sources":["/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js"],"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","Generate","marketplace","nft","count","setCount","generateNFT","mintThenList","result","uri","path","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","price","toString","makeItem","maxWidth","e","target","value","Create"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,iBAAlC;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,kBAAzC;;AACA,MAAMC,MAAM,GAAGD,cAAc,CAAC,oCAAD,CAA7B;;AAEA,MAAME,QAAQ,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAyB;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMa,WAAW,GAAG,YAAY;AAC9B,QAAI,CAACF,KAAL,EAAY;AACb,GAFD;;AAGA,QAAMG,YAAY,GAAG,MAAOC,MAAP,IAAkB;AACrC,UAAMC,GAAG,GAAI,+BAA8BD,MAAM,CAACE,IAAK,EAAvD,CADqC,CAErC;;AACA,UAAK,CAAC,MAAMP,GAAG,CAACQ,IAAJ,CAASF,GAAT,CAAP,EAAsBG,IAAtB,EAAL,CAHqC,CAIrC;;AACA,UAAMC,EAAE,GAAG,MAAMV,GAAG,CAACW,UAAJ,EAAjB,CALqC,CAMrC;;AACA,UAAK,CAAC,MAAMX,GAAG,CAACY,iBAAJ,CAAsBb,WAAW,CAACc,OAAlC,EAA2C,IAA3C,CAAP,EAAyDJ,IAAzD,EAAL,CAPqC,CAQrC;;AACA,UAAMK,YAAY,GAAGvB,MAAM,CAACwB,KAAP,CAAaC,UAAb,CAAwBC,KAAK,CAACC,QAAN,EAAxB,CAArB;AACA,UAAK,CAAC,MAAMnB,WAAW,CAACoB,QAAZ,CAAqBnB,GAAG,CAACa,OAAzB,EAAkCH,EAAlC,EAAsCI,YAAtC,CAAP,EAA4DL,IAA5D,EAAL;AACD,GAXD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,mBAA5B;AAAgD,QAAA,KAAK,EAAE;AAAEW,UAAAA,QAAQ,EAAE;AAAZ,SAAvD;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACE,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA,oCACE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,QAAQ,EAAGC,CAAD,IAAOnB,QAAQ,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAvC;AAAyD,cAAA,IAAI,EAAC,IAA9D;AAAmE,cAAA,QAAQ,MAA3E;AAA4E,cAAA,IAAI,EAAC,QAAjF;AAA0F,cAAA,WAAW,EAAC;AAAtG;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,qCACE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAEpB,WAAjB;AAA8B,gBAAA,OAAO,EAAC,SAAtC;AAAgD,gBAAA,IAAI,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CApCD;;GAAML,Q;;KAAAA,Q;AAsCN,eAAe0B,MAAf","sourcesContent":["import { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst Generate = ({ marketplace, nft }) => {\n  const [count, setCount] = useState(null)\n\n  const generateNFT = async () => {\n    if (!count) return\n  }\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control onChange={(e) => setCount(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Number of NFT Images\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={generateNFT} variant=\"primary\" size=\"lg\">\n                  Generate!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}