{"ast":null,"code":"var _jsxFileName = \"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Form } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar itemImags = [];\n\nconst Generate = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [count, setCount] = useState(null);\n  const [items, setItems] = useState([]);\n\n  const generateNFT = async () => {\n    if (!count) return;\n    const uri = `http://127.0.0.1:5000/generator/${count}`;\n    fetch(uri).then(response => response.json()).then(data => {\n      loadNFTImages(data);\n    });\n  };\n\n  const loadNFTImages = async data => {\n    console.log(data.items);\n    itemImags = data.items;\n    console.log(itemImags.length);\n    setItems(itemImags);\n  };\n\n  const listNFTImage = async item => {//await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n    //loadMarketplaceItems()\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setCount(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Number of NFT Images\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: generateNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Generate!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center\",\n        children: items.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-5 container\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            xs: 1,\n            md: 2,\n            lg: 4,\n            className: \"g-4 py-5\",\n            children: items.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              className: \"overflow-hidden\",\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                  variant: \"top\",\n                  src: item.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                  color: \"secondary\",\n                  children: /*#__PURE__*/_jsxDEV(Card.Title, {\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"d-grid\",\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => listNFTImage(item),\n                      variant: \"primary\",\n                      size: \"lg\",\n                      children: \"List!\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 68,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 19\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n          style: {\n            padding: \"1rem 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"No listed NFT Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Generate, \"8twSMXLBYkDJp3gED0oHCoqSIg8=\");\n\n_c = Generate;\nexport default Generate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Generate\");","map":{"version":3,"sources":["/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js"],"names":["React","useState","useEffect","ethers","Form","create","ipfsHttpClient","Row","Col","Card","Button","itemImags","Generate","marketplace","nft","count","setCount","items","setItems","generateNFT","uri","fetch","then","response","json","data","loadNFTImages","console","log","length","listNFTImage","item","maxWidth","e","target","value","map","idx","address","name","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { ethers } from \"ethers\"\nimport { Form } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { Row, Col, Card, Button } from 'react-bootstrap'\n\nvar itemImags = []\n\nconst Generate = ({ marketplace, nft, }) => {\n  const [count, setCount] = useState(null)\n  const [items, setItems] = useState([])\n  \n\n  const generateNFT = async () => {\n    if (!count) return\n\n    const uri = `http://127.0.0.1:5000/generator/${count}`\n    fetch(uri)\n    .then(response => response.json())\n    .then(data => {\n      loadNFTImages(data);\n    });\n  }\n\n  const loadNFTImages = async (data) => { \n\n    console.log(data.items);\n    itemImags = data.items;\n    console.log(itemImags.length)\n    \n    setItems(itemImags)\n  }\n\n  const listNFTImage = async (item) => {\n    //await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n    //loadMarketplaceItems()\n  }\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control onChange={(e) => setCount(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Number of NFT Images\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={generateNFT} variant=\"primary\" size=\"lg\">\n                  Generate!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n\n        <div className=\"flex justify-center\">\n        {items.length > 0 ?\n          <div className=\"px-5 container\">\n            <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n              {items.map((item, idx) => (\n                <Col key={idx} className=\"overflow-hidden\">\n                  <Card>\n                    <Card.Img variant=\"top\" src={item.address} />\n                    <Card.Body color=\"secondary\">\n                      <Card.Title>{item.name}</Card.Title>\n                    </Card.Body>\n                    <Card.Footer>\n                      <div className='d-grid'>\n                        <Button onClick={() => listNFTImage(item)} variant=\"primary\" size=\"lg\">\n                          List!\n                        </Button>\n                      </div>\n                    </Card.Footer>\n                  </Card>\n                </Col>\n              ))}\n            </Row>\n          </div>\n          : (\n            <main style={{ padding: \"1rem 0\" }}>\n              <h2>No listed NFT Images</h2>\n            </main>\n          )}\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Generate"]},"metadata":{},"sourceType":"module"}