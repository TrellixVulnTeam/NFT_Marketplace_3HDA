[{"/home/maryam/Documents/vscode/NFT_Marketplace/src/index.js":"1","/home/maryam/Documents/vscode/NFT_Marketplace/src/serviceWorker.js":"2","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/App.js":"3","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Home.js":"4","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Create.js":"5","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyListedItems.js":"6","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyPurchases.js":"7","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Navbar.js":"8","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js":"9","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/NFTList.js":"10"},{"size":492,"mtime":1649220194144,"results":"11","hashOfConfig":"12"},{"size":4951,"mtime":1649220194144,"results":"13","hashOfConfig":"12"},{"size":3293,"mtime":1649309459525,"results":"14","hashOfConfig":"12"},{"size":2742,"mtime":1649321866917,"results":"15","hashOfConfig":"12"},{"size":2792,"mtime":1649220194144,"results":"16","hashOfConfig":"12"},{"size":3030,"mtime":1649220194144,"results":"17","hashOfConfig":"12"},{"size":2305,"mtime":1649220194144,"results":"18","hashOfConfig":"12"},{"size":2116,"mtime":1649670114552,"results":"19","hashOfConfig":"12"},{"size":1853,"mtime":1649748052172,"results":"20","hashOfConfig":"12"},{"size":1927,"mtime":1649747454625,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"so510l",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/maryam/Documents/vscode/NFT_Marketplace/src/index.js",[],[],["55","56"],"/home/maryam/Documents/vscode/NFT_Marketplace/src/serviceWorker.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/App.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Home.js",["57"],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Create.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyListedItems.js",["58"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nfunction renderSoldItems(items) {\n  return (\n    <>\n      <h2>Sold</h2>\n      <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n        {items.map((item, idx) => (\n          <Col key={idx} className=\"overflow-hidden\">\n            <Card>\n              <Card.Img variant=\"top\" src={item.image} />\n              <Card.Footer>\n                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\n              </Card.Footer>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\nexport default function MyListedItems({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [listedItems, setListedItems] = useState([])\n  const [soldItems, setSoldItems] = useState([])\n  const loadListedItems = async () => {\n    // Load all sold items that the user listed\n    const itemCount = await marketplace.itemCount()\n    let listedItems = []\n    let soldItems = []\n    for (let indx = 1; indx <= itemCount; indx++) {\n      const i = await marketplace.items(indx)\n      if (i.seller.toLowerCase() === account) {\n        // get uri url from nft contract\n        const uri = await nft.tokenURI(i.tokenId)\n        // use uri to fetch the nft metadata stored on ipfs \n        const response = await fetch(uri)\n        const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(i.itemId)\n        // define listed item object\n        let item = {\n          totalPrice,\n          price: i.price,\n          itemId: i.itemId,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        }\n        listedItems.push(item)\n        // Add listed item to sold items array if sold\n        if (i.sold) soldItems.push(item)\n      }\n    }\n    setLoading(false)\n    setListedItems(listedItems)\n    setSoldItems(soldItems)\n  }\n  useEffect(() => {\n    loadListedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {listedItems.length > 0 ?\n        <div className=\"px-5 py-3 container\">\n            <h2>Listed</h2>\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n            {listedItems.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n            {soldItems.length > 0 && renderSoldItems(soldItems)}\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )}\n    </div>\n  );\n}","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyPurchases.js",["59"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nexport default function MyPurchases({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [purchases, setPurchases] = useState([])\n  const loadPurchasedItems = async () => {\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n    const filter =  marketplace.filters.Bought(null,null,null,null,null,account)\n    const results = await marketplace.queryFilter(filter)\n    //Fetch metadata of each nft and add that to listedItem object.\n    const purchases = await Promise.all(results.map(async i => {\n      // fetch arguments from each result\n      i = i.args\n      // get uri url from nft contract\n      const uri = await nft.tokenURI(i.tokenId)\n      // use uri to fetch the nft metadata stored on ipfs \n      const response = await fetch(uri)\n      const metadata = await response.json()\n      // get total price of item (item price + fee)\n      const totalPrice = await marketplace.getTotalPrice(i.itemId)\n      // define listed item object\n      let purchasedItem = {\n        totalPrice,\n        price: i.price,\n        itemId: i.itemId,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image\n      }\n      return purchasedItem\n    }))\n    setLoading(false)\n    setPurchases(purchases)\n  }\n  useEffect(() => {\n    loadPurchasedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {purchases.length > 0 ?\n        <div className=\"px-5 container\">\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {purchases.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No purchases</h2>\n          </main>\n        )}\n    </div>\n  );\n}","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Navbar.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js",["60","61","62","63","64","65","66","67","68"],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/NFTList.js",["69","70","71","72","73","74"],[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":44,"column":6,"nodeType":"81","endLine":44,"endColumn":8,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":64,"column":6,"nodeType":"81","endLine":64,"endColumn":8,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"85","line":39,"column":6,"nodeType":"81","endLine":39,"endColumn":8,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"91","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":16},{"ruleId":"87","severity":1,"message":"92","line":4,"column":20,"nodeType":"89","messageId":"90","endLine":4,"endColumn":34},{"ruleId":"87","severity":1,"message":"93","line":5,"column":15,"nodeType":"89","messageId":"90","endLine":5,"endColumn":18},{"ruleId":"87","severity":1,"message":"94","line":5,"column":20,"nodeType":"89","messageId":"90","endLine":5,"endColumn":24},{"ruleId":"87","severity":1,"message":"95","line":5,"column":34,"nodeType":"89","messageId":"90","endLine":5,"endColumn":37},{"ruleId":"87","severity":1,"message":"96","line":6,"column":11,"nodeType":"89","messageId":"90","endLine":6,"endColumn":15},{"ruleId":"87","severity":1,"message":"97","line":12,"column":10,"nodeType":"89","messageId":"90","endLine":12,"endColumn":15},{"ruleId":"87","severity":1,"message":"98","line":37,"column":9,"nodeType":"89","messageId":"90","endLine":37,"endColumn":21},{"ruleId":"87","severity":1,"message":"91","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":16},{"ruleId":"87","severity":1,"message":"99","line":4,"column":9,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"100","line":7,"column":5,"nodeType":"89","messageId":"90","endLine":7,"endColumn":14},{"ruleId":"87","severity":1,"message":"101","line":10,"column":10,"nodeType":"89","messageId":"90","endLine":10,"endColumn":17},{"ruleId":"87","severity":1,"message":"102","line":10,"column":19,"nodeType":"89","messageId":"90","endLine":10,"endColumn":29},{"ruleId":"79","severity":1,"message":"103","line":22,"column":7,"nodeType":"81","endLine":22,"endColumn":9,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMarketplaceItems'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'loadListedItems'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'loadPurchasedItems'. Either include it or remove the dependency array.",["109"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ethers' is defined but never used.","'ipfsHttpClient' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'Nav' is defined but never used.","'Link' is defined but never used.","'items' is assigned a value but never used.","'listNFTImage' is assigned a value but never used.","'items' is defined but never used.","'itemImags' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'uri'. Either include it or remove the dependency array.",["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [loadMarketplaceItems]",{"range":"119","text":"120"},"Update the dependencies array to be: [loadListedItems]",{"range":"121","text":"122"},"Update the dependencies array to be: [loadPurchasedItems]",{"range":"123","text":"124"},"Update the dependencies array to be: [uri]",{"range":"125","text":"126"},[1428,1430],"[loadMarketplaceItems]",[2119,2121],"[loadListedItems]",[1500,1502],"[loadPurchasedItems]",[591,593],"[uri]"]