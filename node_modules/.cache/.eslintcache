[{"/home/maryam/Documents/vscode/NFT_Marketplace/src/index.js":"1","/home/maryam/Documents/vscode/NFT_Marketplace/src/serviceWorker.js":"2","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/App.js":"3","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Home.js":"4","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Create.js":"5","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyListedItems.js":"6","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyPurchases.js":"7","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Navbar.js":"8","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js":"9","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/NFTList.js":"10"},{"size":492,"mtime":1649220194144,"results":"11","hashOfConfig":"12"},{"size":4951,"mtime":1649220194144,"results":"13","hashOfConfig":"12"},{"size":3293,"mtime":1649309459525,"results":"14","hashOfConfig":"12"},{"size":2742,"mtime":1649321866917,"results":"15","hashOfConfig":"12"},{"size":2792,"mtime":1649220194144,"results":"16","hashOfConfig":"12"},{"size":3030,"mtime":1649220194144,"results":"17","hashOfConfig":"12"},{"size":2305,"mtime":1649220194144,"results":"18","hashOfConfig":"12"},{"size":2131,"mtime":1649307431777,"results":"19","hashOfConfig":"12"},{"size":1348,"mtime":1649322975656,"results":"20","hashOfConfig":"12"},{"size":1455,"mtime":1649321967555,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"so510l",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/maryam/Documents/vscode/NFT_Marketplace/src/index.js",[],[],["55","56"],"/home/maryam/Documents/vscode/NFT_Marketplace/src/serviceWorker.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/App.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Home.js",["57"],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Create.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyListedItems.js",["58"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nfunction renderSoldItems(items) {\n  return (\n    <>\n      <h2>Sold</h2>\n      <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n        {items.map((item, idx) => (\n          <Col key={idx} className=\"overflow-hidden\">\n            <Card>\n              <Card.Img variant=\"top\" src={item.image} />\n              <Card.Footer>\n                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\n              </Card.Footer>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\nexport default function MyListedItems({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [listedItems, setListedItems] = useState([])\n  const [soldItems, setSoldItems] = useState([])\n  const loadListedItems = async () => {\n    // Load all sold items that the user listed\n    const itemCount = await marketplace.itemCount()\n    let listedItems = []\n    let soldItems = []\n    for (let indx = 1; indx <= itemCount; indx++) {\n      const i = await marketplace.items(indx)\n      if (i.seller.toLowerCase() === account) {\n        // get uri url from nft contract\n        const uri = await nft.tokenURI(i.tokenId)\n        // use uri to fetch the nft metadata stored on ipfs \n        const response = await fetch(uri)\n        const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(i.itemId)\n        // define listed item object\n        let item = {\n          totalPrice,\n          price: i.price,\n          itemId: i.itemId,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        }\n        listedItems.push(item)\n        // Add listed item to sold items array if sold\n        if (i.sold) soldItems.push(item)\n      }\n    }\n    setLoading(false)\n    setListedItems(listedItems)\n    setSoldItems(soldItems)\n  }\n  useEffect(() => {\n    loadListedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {listedItems.length > 0 ?\n        <div className=\"px-5 py-3 container\">\n            <h2>Listed</h2>\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n            {listedItems.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n            {soldItems.length > 0 && renderSoldItems(soldItems)}\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )}\n    </div>\n  );\n}","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/MyPurchases.js",["59"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nexport default function MyPurchases({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [purchases, setPurchases] = useState([])\n  const loadPurchasedItems = async () => {\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n    const filter =  marketplace.filters.Bought(null,null,null,null,null,account)\n    const results = await marketplace.queryFilter(filter)\n    //Fetch metadata of each nft and add that to listedItem object.\n    const purchases = await Promise.all(results.map(async i => {\n      // fetch arguments from each result\n      i = i.args\n      // get uri url from nft contract\n      const uri = await nft.tokenURI(i.tokenId)\n      // use uri to fetch the nft metadata stored on ipfs \n      const response = await fetch(uri)\n      const metadata = await response.json()\n      // get total price of item (item price + fee)\n      const totalPrice = await marketplace.getTotalPrice(i.itemId)\n      // define listed item object\n      let purchasedItem = {\n        totalPrice,\n        price: i.price,\n        itemId: i.itemId,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image\n      }\n      return purchasedItem\n    }))\n    setLoading(false)\n    setPurchases(purchases)\n  }\n  useEffect(() => {\n    loadPurchasedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {purchases.length > 0 ?\n        <div className=\"px-5 container\">\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {purchases.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No purchases</h2>\n          </main>\n        )}\n    </div>\n  );\n}","/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Navbar.js",[],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/Generate.js",["60","61"],[],"/home/maryam/Documents/vscode/NFT_Marketplace/src/frontend/components/NFTList.js",["62","63","64","65","66","67","68"],[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":44,"column":6,"nodeType":"75","endLine":44,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":64,"column":6,"nodeType":"75","endLine":64,"endColumn":8,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":39,"column":6,"nodeType":"75","endLine":39,"endColumn":8,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":16},{"ruleId":"81","severity":1,"message":"85","line":4,"column":20,"nodeType":"83","messageId":"84","endLine":4,"endColumn":34},{"ruleId":"81","severity":1,"message":"86","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"82","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":16},{"ruleId":"81","severity":1,"message":"87","line":4,"column":9,"nodeType":"83","messageId":"84","endLine":4,"endColumn":14},{"ruleId":"81","severity":1,"message":"88","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":17},{"ruleId":"81","severity":1,"message":"89","line":8,"column":19,"nodeType":"83","messageId":"84","endLine":8,"endColumn":29},{"ruleId":"81","severity":1,"message":"90","line":9,"column":17,"nodeType":"83","messageId":"84","endLine":9,"endColumn":25},{"ruleId":"81","severity":1,"message":"91","line":11,"column":9,"nodeType":"83","messageId":"84","endLine":11,"endColumn":22},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMarketplaceItems'. Either include it or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has a missing dependency: 'loadListedItems'. Either include it or remove the dependency array.",["95"],"React Hook useEffect has a missing dependency: 'loadPurchasedItems'. Either include it or remove the dependency array.",["96"],"no-unused-vars","'ethers' is defined but never used.","Identifier","unusedVar","'ipfsHttpClient' is defined but never used.","'useEffect' is defined but never used.","'items' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setItems' is assigned a value but never used.","'loadNFTImages' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [loadMarketplaceItems]",{"range":"103","text":"104"},"Update the dependencies array to be: [loadListedItems]",{"range":"105","text":"106"},"Update the dependencies array to be: [loadPurchasedItems]",{"range":"107","text":"108"},[1428,1430],"[loadMarketplaceItems]",[2119,2121],"[loadListedItems]",[1500,1502],"[loadPurchasedItems]"]